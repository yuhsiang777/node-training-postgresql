name: Check
on:
  push:

jobs:
  build :
    name: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout to Repo Directory
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    - name: Restore cache node modules
      id: cache
      uses: actions/cache/restore@v4
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci
    - name: update cache node modules
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
  eslint-scan :
    name: Eslint Scanning
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout to Repo Directory
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    - name: Restore cache node modules
      id: cache
      uses: actions/cache/restore@v4
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Eslint Scan
      uses: reviewdog/action-eslint@v1
      with:
        reporter: github-check
  integration-test:
    name: Run integration Test
    needs: [build, eslint-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    env:
      DB_USERNAME: root
      DB_DATABASE: test
      DB_PASSWORD: test
      DB_HOST: localhost
      DB_PORT: 5432
    services:
      postgres:
        image: postgres:16.4-alpine3.20
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_DATABASE }}
    steps:
    - name: Checkout to Repo Directory
      uses: actions/checkout@v4
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    - name: Restore cache node modules
      id: cache
      uses: actions/cache/restore@v4
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Make env file
      uses: SpicyPizza/create-envfile@v1
      with:
        envkey_NODE_ENV: production
        envkey_DB_HOST: ${{ env.DB_HOST }}
        envkey_DB_PORT: ${{ env.DB_PORT }}
        envkey_DB_DATABASE: ${{ env.DB_DATABASE }}
        envkey_DB_USERNAME: ${{ env.DB_USERNAME }}
        envkey_DB_PASSWORD: ${{ env.DB_PASSWORD }}
        envkey_DB_SYNCHRONIZE: false
        envkey_DB_ENABLE_SSL: false
        envkey_JWT_SECRET: hexschool666
        envkey_JWT_EXPIRES_DAY: 30d
        envkey_LOG_LEVEL: debug
        envkey_PORT: 3000
        directory: ./
        file_name: .env
    - name: init schema
      run: npm run init:schema
    - name: test server
      run: npm run test:integration
    - name: upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: IntegrationTest Coverage report
        path: coverage
        retention-days: 1
    - name: Integration Test Coverage monitor
      uses: slavcodev/coverage-monitor-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        coverage_path: "coverage/clover.xml"
        threshold_alert: 10
        threshold_warning: 50
        comment_context: 'Integration Test Report'
        
        
        